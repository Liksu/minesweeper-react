{"version":3,"sources":["utils.ts","debounced-clicks.ts","board-state.ts","field/field.tsx","board/board.tsx","settings.ts","settings-selector/settings-selector.tsx","swipe.ts","wrapper/wrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["classes","flatMap","item","String","Array","Object","entries","filter","map","name","join","arand","min","max","Math","ceil","floor","random","ClickValues","GameState","DebouncedClicks","boardState","timerId","values","value","duration","phase","target","logging","resultsValues","contextmenu","Mark","dblclick","Lookup","click","Open","buttonsMapping","0","1","2","3","4","goDown","event","log","elements","get","push","button","startTimer","length","reduce","a","b","reset","flush","goUp","catchResult","type","stopPropagation","preventDefault","cb","window","setTimeout","saveState","clearTimeout","onPress","onClick","console","buttons","valueStr","this","onMouseDownCapture","onMouseUpCapture","onContextMenuCapture","onDoubleClickCapture","Field","props","state","content","isSuggested","isCheat","count","enabled","settings","element","open","doMove","move","isOpen","setState","isMine","toString","mark","isMarked","board","minesCount","resetAnimation","lookup","around","getAround","marked","n","field","Number","suggest","cheat","action","Suggest","disable","current","classList","remove","offsetWidth","add","forEach","component","toggle","React","createRef","cssSettings","y","className","suggested","style","ref","set","Component","IFieldSettings","x","assign","BoardState","fields","minesFields","Map","columns","rows","mines","found","runner","neighbour","includes","starter","unopenedEmpties","unmarkedMines","unopenedMines","mine","mineIndex","findIndex","splice","empty","clickedField","find","Board","timer","won","tick","updateInfo","minesLeft","fillBoard","setInterval","InProgress","gameOver","checkWin","createBoard","Pending","listeners","win","loose","Win","stop","clearInterval","Loose","modes","beginner","default","intermediate","expert","fillModes","synonyms","beginer","small","easy","medium","middle","big","herd","Settings","getInitialSettings","isLandscape","screen","orientation","substr","innerWidth","innerHeight","vw","vh","result","keys","size","area","mode","reverse","hash","location","replace","toLowerCase","test","calcSettings","RegExp","$1","maxSize","minSize","fieldSize","fieldsMaxSide","groups","match","customSettings","key","SettingsSelector","joiner","possible","changeCustom","changeSettings","variant","getVariantByBoard","history","pushState","reload","getHelp","help","onClose","getPossibleSettings","getMinesCount","info","restart","onChange","defaultValue","disabled","split","string","Swipe","document","body","addImmediately","startX","startY","handlers","threshold","handleTouchStart","touches","clientX","clientY","handleTouchEnd","changedTouches","endX","endY","diffX","abs","diffY","direction","querySelector","attach","addEventListener","removeEventListener","some","handler","Wrapper","close","catchEsc","onKeyUp","children","App","showSettings","swipe","on","left","toggleSettings","right","isCheatOn","closeSettings","toggleCheat","ctrlKey","shiftKey","detach","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b03f5c4d.chunk.js","sourcesContent":["export function classes(...classes: Array<string | Array<string> | {[className: string]: boolean}>): string {\r\n    return classes.flatMap(item => {\r\n        if (String(item) === item || item instanceof Array) return item;\r\n        return Object.entries(item).filter(([name, value]) => value).map(([name, flag]) => name)\r\n    }).join(' ')\r\n}\r\n\r\nexport function range(a: number, b?: number) {\r\n    if (a < 0 && b == null) b = -1\r\n    if (b == null) [a, b] = [1, a]\r\n\r\n    const result = []\r\n    for (let i = a; i <= b; i++) result.push(i)\r\n    return result\r\n}\r\n\r\nexport function rand(min: number, max?: number) {\r\n    if (min < 0 && max == null) max = -1\r\n    if (max == null) [min, max] = [1, min]\r\n\r\n    min = Math.ceil(min)\r\n    max = Math.floor(max)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nexport function arand(min: number, max?: number) {\r\n    if (max == null) [min, max] = [0, min]\r\n\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n","import {BoardState} from \"./board-state\";\r\nimport {Field} from \"./field/field\";\r\n\r\nexport enum ClickValues {\r\n    Open = 1,\r\n    Mark = 2,\r\n    Lookup = 3,\r\n    Suggest\r\n}\r\n\r\nexport abstract class ClickTarget {\r\n    public abstract onClick(action: ClickValues): void\r\n    public abstract onPress(state: boolean, action: ClickValues): void\r\n}\r\n\r\nexport class DebouncedClicks {\r\n    timerId = 0\r\n    values: Array<number> = []\r\n    value: ClickValues = 0\r\n    duration = 64\r\n    phase: boolean | null = null // false = touchstart / mousedown, true = touchend / mouseup, null - nothing\r\n    target: Field | null = null\r\n\r\n    private boardState: BoardState;\r\n    private logging = false\r\n    private resultsValues: {[type: string]: ClickValues} = {\r\n        contextmenu: ClickValues.Mark,\r\n        dblclick: ClickValues.Lookup,\r\n        click: ClickValues.Open\r\n    }\r\n\r\n    private buttonsMapping: {[buttons: number]: number} = {\r\n        0: 1, // left button\r\n        1: 4, // middle/wheel button\r\n        2: 2, // right button\r\n        3: 8, // back button\r\n        4: 16, // forward button\r\n    }\r\n\r\n    constructor(boardState: BoardState) {\r\n        this.boardState = boardState\r\n    }\r\n\r\n    get listeners() {\r\n        return {\r\n            onMouseDownCapture: this.goDown,\r\n            onMouseUpCapture: this.goUp,\r\n            onContextMenuCapture: this.catchResult,\r\n            onDoubleClickCapture: this.catchResult\r\n        }\r\n    }\r\n\r\n    goDown = (event: any): void => {\r\n        this.log('down', event)\r\n        if (this.phase === null) {\r\n            this.target = this.boardState.elements.get(event.target) as Field\r\n        }\r\n\r\n        this.phase = false\r\n        this.values.push(this.buttonsMapping[event.button])\r\n\r\n        this.startTimer(() => {\r\n            this.value = this.values[0]\r\n            if (this.values.length > 1) {\r\n                this.value = this.values.reduce((a, b) => a | b)\r\n            }\r\n\r\n            this.log('pre flush')\r\n            this.reset(true)\r\n            this.flush()\r\n        })\r\n    }\r\n\r\n    goUp = (event: any): void => {\r\n        this.log('up', event)\r\n        this.phase = true\r\n        this.startTimer(this.flush)\r\n    }\r\n\r\n    catchResult = (event: any): void => {\r\n        this.log('catch', event)\r\n\r\n        if (!this.target) this.target = this.boardState.elements.get(event.target) as Field\r\n        if (!this.value) this.value = this.resultsValues[event.type]\r\n        this.phase = true\r\n        this.flush()\r\n\r\n        this.reset()\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n\r\n    private startTimer = (cb: Function) => {\r\n        if (!this.timerId) {\r\n            this.timerId = window.setTimeout(cb, this.duration)\r\n        }\r\n    }\r\n\r\n    private reset = (saveState = false) => {\r\n        this.values = []\r\n\r\n        if (this.timerId) clearTimeout(this.timerId)\r\n        this.timerId = 0\r\n\r\n        if (!saveState) {\r\n            this.value = 0\r\n            this.phase = null\r\n            this.target = null\r\n        }\r\n    }\r\n\r\n    private flush = () => {\r\n        this.log('flush')\r\n        this.target?.onPress(!!this.phase, this.value)\r\n\r\n        if (this.phase) {\r\n            this.target?.onClick(this.value)\r\n            this.reset()\r\n        }\r\n    }\r\n\r\n    private log = (name: string, event?: any) => {\r\n        if (!this.logging) return\r\n        if (event === false) return console.log(name)\r\n\r\n        const {button, buttons, type} = event ?? {}\r\n        const {value, phase} = this\r\n        const valueStr = {1: 'Open', 2: 'Mark', 3: 'Lookup', 4: 'Suggest'}[value]\r\n\r\n        console.log(name,\r\n            {value, valueStr, phase, values: [...this.values]},\r\n            event ? {button, buttons, type, event} : new (class NoEvent {})()\r\n        )\r\n    }\r\n}","import {arand} from \"./utils\";\r\nimport {Field} from \"./field/field\";\r\nimport React from \"react\";\r\n\r\nexport type TSettings = 'columns' | 'rows' | 'mines'\r\nexport enum GameState {\r\n    Pending = 'Pending',\r\n    InProgress = 'In Progress',\r\n    Win = 'You Win! 😎',\r\n    Loose = 'You Loose 🙁'\r\n}\r\n\r\nexport interface IBoardSettings {\r\n    columns: number;\r\n    rows: number;\r\n    mines: number;\r\n}\r\n\r\nexport class IFieldSettings {\r\n    value: number = 0 // 0 - empty, 1..8 - mines are near\r\n    x: number = 0\r\n    y: number = 0\r\n    isOpen?: boolean = false\r\n    isMine?: boolean = false\r\n    isMarked?: boolean = false\r\n\r\n    component?: Field\r\n    board?: BoardState\r\n\r\n    constructor(values: IFieldSettings) {\r\n        Object.assign(this, values);\r\n    }\r\n}\r\n\r\n// TODO: tick cause re-render board\r\n// TODO: each updateInfo cause global re-render\r\n\r\nexport class BoardState {\r\n    fields: Array<IFieldSettings> = []\r\n    board: Array<Array<IFieldSettings>> = []\r\n    minesFields: Array<IFieldSettings> = []\r\n    elements: Map<HTMLDivElement, React.Component> = new Map()\r\n\r\n    columns = 8\r\n    rows = 8\r\n    mines = 8\r\n\r\n\r\n    createBoard(settings: IBoardSettings, empty = false) {\r\n        Object.assign(this, settings);\r\n\r\n        // reset properties\r\n        this.fields = [];\r\n        this.minesFields = [];\r\n        this.board = [];\r\n        for (let x = 0; x < this.columns; x++) {\r\n            this.board[x] = []\r\n        }\r\n\r\n        // create fields\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.columns; x++) {\r\n                this.board[x][y] = new IFieldSettings({x, y, value: 0, board: this})\r\n                this.fields.push(this.board[x][y])\r\n            }\r\n        }\r\n    }\r\n\r\n    fillBoard(starter: IFieldSettings) {\r\n        // set mines\r\n        let n = this.mines;\r\n        while (n) {\r\n            const x = arand(this.columns)\r\n            const y = arand(this.rows)\r\n\r\n            if (!this.board[x][y].isMine && x !== starter.x && y !== starter.y) {\r\n                this.minesFields.push(this.board[x][y])\r\n                this.board[x][y].isMine = true;\r\n                n--;\r\n            }\r\n        }\r\n\r\n        // set values\r\n        this.minesFields.forEach(field => {\r\n            this.getAround(field).forEach(field => field.value++)\r\n        })\r\n    }\r\n\r\n    getAround = (field: IFieldSettings): Array<IFieldSettings> => {\r\n        const {x, y} = field;\r\n        return [\r\n            [x - 1, y - 1], [x, y - 1], [x + 1, y - 1],\r\n            [x - 1, y], /*  ;)  */  [x + 1, y],\r\n            [x - 1, y + 1], [x, y + 1], [x + 1, y + 1],\r\n        ].filter(([x, y]) => x >= 0 && x < this.columns && y >= 0 && y < this.rows)\r\n            .map(([x, y]) => this.board[x][y])\r\n    }\r\n\r\n    lookup = (field: IFieldSettings) => {\r\n        const found: Array<IFieldSettings> = []\r\n        const runner = (field: IFieldSettings) => {\r\n            const around = this.getAround(field).filter(neighbour => !found.includes(neighbour) && !neighbour.isMarked);\r\n            found.push(...around)\r\n            around.filter(neighbour => !neighbour.value).forEach(runner)\r\n        }\r\n\r\n        runner(field)\r\n        return found\r\n    }\r\n\r\n    get minesCount() {\r\n        return this.mines - this.fields.filter(field => field.isMarked).length\r\n    }\r\n\r\n    help() {\r\n        const unopenedEmpties = this.fields.filter(field => !field.isMine && !field.isOpen && !field.isMarked)\r\n        const unmarkedMines = this.minesFields.filter(field => !field.isMarked)\r\n        let unopenedMines = unmarkedMines.filter(field => this.getAround(field).filter(field => field.isOpen).length)\r\n        if (!unopenedMines.length) unopenedMines = unmarkedMines\r\n\r\n        const mine = unopenedMines[arand(unopenedMines.length)]\r\n        const target = unopenedEmpties[arand(unopenedEmpties.length)]\r\n\r\n        mine.isMine = false\r\n        target.isMine = true\r\n\r\n        this.getAround(mine).forEach(field => {\r\n            field.value--;\r\n            if (field.isOpen) field.component?.setState({content: field.value || ''})\r\n        })\r\n        this.getAround(target).forEach(field => {\r\n            field.value++;\r\n            if (field.isOpen) field.component?.setState({content: field.value || ''})\r\n        })\r\n\r\n        const mineIndex = this.minesFields.findIndex(field => field === mine)\r\n        this.minesFields.splice(mineIndex, 1, target)\r\n\r\n        this.getAround(mine)\r\n            .filter(field => !field.value && field.isOpen)\r\n            .forEach(empty => {\r\n                empty.component?.open(true)\r\n            })\r\n    }\r\n\r\n    checkWin(clickedField?: IFieldSettings): boolean {\r\n        const closedFound = this.fields.find(field => !field.isMine && (!field.isOpen && clickedField !== field))\r\n        if (!closedFound) {\r\n            this.minesFields.forEach(field => field.component?.mark(true))\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n}","import React from \"react\";\r\nimport './field.scss'\r\nimport {classes} from \"../utils\";\r\nimport {IFieldSettings} from \"../board-state\";\r\nimport {ClickTarget, ClickValues} from \"../debounced-clicks\";\r\n\r\ninterface IFieldProps {\r\n    move?: Function;\r\n    lookup?: Function;\r\n    mark?: Function;\r\n    field: IFieldSettings;\r\n}\r\n\r\nexport class Field extends React.Component<IFieldProps> implements ClickTarget {\r\n    state = {\r\n        content: '',\r\n        isSuggested: false,\r\n        isCheat: false,\r\n        count: 0\r\n    }\r\n\r\n    enabled = true;\r\n    settings: IFieldSettings\r\n    private readonly element: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: IFieldProps) {\r\n        super(props);\r\n        this.settings = props.field\r\n        this.settings.component = this\r\n        this.element = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        const cssSettings = {\r\n            '--count': this.state.count,\r\n            '--direction': this.settings.y < 2 ? 1 : -1\r\n        } as React.CSSProperties;\r\n\r\n        return <div\r\n            className={classes(\r\n                'field',\r\n                `around${this.settings.isMine ? 0 : this.settings.value}`,\r\n                {\r\n                    open: this.settings.isOpen as boolean,\r\n                    marked: this.settings.isMarked as boolean,\r\n                    suggested: this.state.isSuggested,\r\n                    cheat: this.state.isCheat,\r\n                },\r\n            )}\r\n            style={cssSettings}\r\n            ref={this.element}\r\n        >{this.state.content}</div>\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.settings.board?.elements.set(this.element.current as HTMLDivElement, this)\r\n    }\r\n\r\n    open = (doMove = false) => {\r\n        if (doMove) this.props.move?.(this.settings)\r\n\r\n        this.settings.isOpen = true\r\n        this.setState({\r\n            content: this.settings.isMine ? '💣' : (this.settings.value || '').toString(),\r\n            isSuggested: false,\r\n            isCheat: false\r\n        })\r\n    }\r\n\r\n    mark = (state?: boolean) => {\r\n        if (this.settings.isOpen) return\r\n        this.settings.isMarked = state ?? !this.settings.isMarked\r\n        const count = this.settings.board?.minesCount ?? 0\r\n\r\n        this.setState({\r\n            count,\r\n            isSuggested: false,\r\n            isCheat: false,\r\n            content: this.settings.isMarked ? '🚩' : ''\r\n        })\r\n        if (state == null) setTimeout(this.resetAnimation, 0)\r\n    }\r\n\r\n    lookup = () => {\r\n        if (!this.settings.isOpen || !this.settings.value) return\r\n\r\n        const around = this.settings.board?.getAround(this.settings)\r\n        const marked = around?.reduce((n: number, field: IFieldSettings) => n + Number(field.isMarked), 0) ?? 0\r\n\r\n        if (this.props.lookup && this.settings.value === marked) {\r\n            this.props.lookup(this.settings)\r\n        }\r\n    }\r\n\r\n    suggest = () => {\r\n        if (this.settings.isOpen || this.settings.isMarked) return\r\n        this.setState({isSuggested: !this.state.isSuggested})\r\n    }\r\n\r\n    cheat = () => {\r\n        if (this.settings.isOpen || this.settings.isMarked) return\r\n        this.setState({isCheat: !this.state.isCheat})\r\n    }\r\n\r\n    onClick = (action: ClickValues) => {\r\n        // console.log('onClick', {1: 'Open', 2: 'Mark', 3: 'Lookup', 4: 'Suggest'}[action])\r\n        // console.log({button})\r\n        if (!this.enabled) return;\r\n\r\n        switch (action) {\r\n            case ClickValues.Open:\r\n                if (!this.settings.isMarked) {\r\n                    this.open(true)\r\n                }\r\n                break\r\n            case ClickValues.Mark:\r\n                this.mark()\r\n                break\r\n            case ClickValues.Lookup:\r\n                this.lookup()\r\n                break\r\n            case ClickValues.Suggest:\r\n                this.suggest()\r\n                break\r\n        }\r\n    }\r\n\r\n    disable = () => {\r\n        this.enabled = false;\r\n    }\r\n\r\n    private resetAnimation = () => {\r\n        this.element.current?.classList.remove('animate')\r\n        void this.element.current?.offsetWidth\r\n        this.element.current?.classList.add('animate')\r\n    }\r\n\r\n    onPress = (state: boolean, action: ClickValues) => {\r\n        if (action !== ClickValues.Lookup) return\r\n        // console.log('onPress', {state, action}, state ? 'release' : 'press', {1: 'Open', 2: 'Mark', 3: 'Lookup', 4: 'Suggest'}[action])\r\n\r\n        this.settings.board\r\n            ?.getAround(this.settings)\r\n            .filter(field => !field.isOpen && !field.isMarked)\r\n            .forEach(field => {\r\n                field.component?.element.current?.classList.toggle('pressed', !state)\r\n            })\r\n    }\r\n}","import React from \"react\";\r\nimport './board.scss'\r\nimport {Field} from \"../field/field\";\r\nimport {BoardState, GameState, IBoardSettings, IFieldSettings} from \"../board-state\";\r\nimport {classes} from \"../utils\";\r\nimport {DebouncedClicks} from \"../debounced-clicks\";\r\n\r\ninterface IBoardProps extends IBoardSettings {\r\n    board: BoardState\r\n    updateInfo: Function\r\n}\r\n\r\nexport class Board extends React.Component<IBoardProps> {\r\n    click: DebouncedClicks\r\n    timer = 0\r\n    timerId = 0\r\n\r\n    state = {\r\n        won: null\r\n    }\r\n\r\n    constructor(props: IBoardProps) {\r\n        super(props);\r\n        this.props.board.createBoard(this.props);\r\n        this.click = new DebouncedClicks(this.props.board)\r\n        this.props.updateInfo?.({\r\n            state: GameState.Pending,\r\n            minesLeft: this.props.mines\r\n        })\r\n        // @ts-ignore\r\n        window.board = this.props.board\r\n    }\r\n\r\n    render() {\r\n        // console.log('Board.render', this.props.board)\r\n        const settings = {\r\n            '--columns': this.props.columns,\r\n            '--rows': this.props.rows,\r\n            '--count': this.props.board.minesCount\r\n        } as React.CSSProperties;\r\n\r\n        return <div\r\n            {...this.click.listeners}\r\n            className={classes('board', {win: this.state.won === true, loose: this.state.won === false})}\r\n            style={settings}\r\n        >\r\n            {this.props.board.fields.map(field => (\r\n                <Field field={field} key={`${field.x}.${field.y}`} move={this.move} lookup={this.lookup} mark={this.mark}/>\r\n            ))}\r\n        </div>;\r\n    }\r\n\r\n    tick = () => {\r\n        this.timer++\r\n        this.props.updateInfo?.({timer: this.timer})\r\n        // console.log('Seconds', this.timer)\r\n    }\r\n\r\n    mark = (minesLeft: number) => {\r\n        this.props.updateInfo?.({minesLeft})\r\n    }\r\n\r\n    checkWin(clickedField?: IFieldSettings) {\r\n        const isWin = this.props.board.checkWin(clickedField)\r\n        if (isWin) {\r\n            console.log('Win!', this.timer, 'seconds')\r\n            this.props.updateInfo?.({state: GameState.Win})\r\n            this.stop()\r\n            this.setState({won: true})\r\n            return true\r\n        }\r\n    }\r\n\r\n    move = (field: IFieldSettings) => {\r\n        if (!this.timer) {\r\n            this.props.board.fillBoard(field)\r\n            this.timer = 1\r\n            this.timerId = window.setInterval(this.tick, 1000)\r\n            this.props.updateInfo?.({state: GameState.InProgress})\r\n        }\r\n\r\n        if (field.isMine) return this.gameOver()\r\n\r\n        if (!this.checkWin(field)) {\r\n            if (!field.value) this.lookup(field)\r\n        }\r\n    }\r\n\r\n    lookup = (field: IFieldSettings) => {\r\n        if (field.isMarked) return;\r\n\r\n        const found = this.props.board.lookup(field)\r\n        found.forEach(field => !field.isOpen && field.component?.open())\r\n\r\n        const hasMine = found.find((field: IFieldSettings) => field.isMine)\r\n        if (hasMine) this.gameOver()\r\n        else this.checkWin()\r\n\r\n        return found\r\n    }\r\n\r\n    private stop() {\r\n        clearInterval(this.timerId)\r\n        this.props.board.fields.forEach(field => field.component?.disable())\r\n    }\r\n\r\n    private gameOver() {\r\n        this.setState({won: false})\r\n        this.props.updateInfo?.({state: GameState.Loose})\r\n        console.log('game over')\r\n        this.props.board.minesFields.forEach(field => field.component?.open())\r\n        this.stop()\r\n    }\r\n}\r\n","import {IBoardSettings, TSettings} from \"./board-state\";\r\n\r\nexport type Difficulty = 'beginner' | 'default' | 'intermediate' | 'expert'\r\n\r\nexport const modes: {[difficulty in Difficulty]: IBoardSettings} = {\r\n    beginner: {columns: 9, rows: 9, mines: 10},\r\n    default: {columns: 12, rows: 8, mines: 12},\r\n    intermediate: {columns: 16, rows: 16, mines: 40},\r\n    expert: {columns: 30, rows: 16, mines: 99},\r\n}\r\n\r\nexport const fillModes: {[difficulty in Difficulty]: {min: number, mines: number}} = {\r\n    beginner: {min: 10, mines: 0.12},\r\n    default: {min: 12, mines: 0.125},\r\n    intermediate: {min: 16, mines: 0.15},\r\n    expert: {min: 20, mines: 0.2}\r\n}\r\n\r\nconst synonyms: {[key: string]: Difficulty} = {\r\n    beginer: 'beginner',\r\n    small: 'beginner',\r\n    easy: 'beginner',\r\n    min: 'beginner',\r\n    medium: 'intermediate',\r\n    middle: 'intermediate',\r\n    big: 'expert',\r\n    max: 'expert',\r\n    herd: 'expert'\r\n}\r\n\r\nexport interface IPossibleBoardSettings extends Omit<IBoardSettings, 'mines'>{\r\n    mines: {[difficulty in Difficulty]: number}\r\n}\r\n\r\nexport class Settings implements IBoardSettings {\r\n    public columns!: number\r\n    public rows!: number\r\n    public mines!: number\r\n\r\n    constructor() {\r\n        const settings = Settings.getInitialSettings()\r\n\r\n        // fix for mobile landscape\r\n        const isLandscape = window.screen.orientation\r\n            ? window.screen.orientation.type.substr(0, 4) === 'land'\r\n            : window.innerWidth > window.innerHeight\r\n\r\n        const isMobile = window.innerWidth < 800\r\n\r\n        if (isMobile && isLandscape && settings.columns < settings.rows) {\r\n            [settings.columns, settings.rows] = [settings.rows, settings.columns]\r\n        }\r\n\r\n        Object.assign(this, settings)\r\n\r\n        // @ts-ignore\r\n        window.settings = this\r\n    }\r\n\r\n    public getPossibleSettings(): Array<IPossibleBoardSettings> {\r\n        const vw = window.innerWidth, vh = window.innerHeight\r\n        const result = []\r\n        const modes = Object.keys(fillModes) as Array<keyof IPossibleBoardSettings['mines']>\r\n        for (let columns = 100; columns >= 2; columns--)\r\n            for (let rows = 100; rows >= 2; rows--) {\r\n                const found = result.find(result => result.columns === columns || result.rows === rows)\r\n                // console.log({columns, rows, found})\r\n                if (found) continue;\r\n\r\n                const size = Math.min(vh / rows, vw / columns)\r\n                const width = columns * size\r\n                const height = rows * size\r\n                if (vw - width < 10 && vh - height < 10) {\r\n                    const area = columns * rows\r\n                    const settings = {columns, rows, mines: {}} as IPossibleBoardSettings\r\n                    modes.forEach(mode => settings.mines[mode] = Math.floor(fillModes[mode].mines * area))\r\n                    result.push(settings)\r\n                }\r\n            }\r\n\r\n        return result.reverse()\r\n    }\r\n\r\n    static getInitialSettings(): IBoardSettings {\r\n        let hash = window.location.hash.replace('#', '').toLowerCase()\r\n\r\n        if (!hash) return modes.default\r\n        if (hash in synonyms) hash = synonyms[hash]\r\n        if (hash in modes) return modes[hash as Difficulty]\r\n\r\n        if (/^fill:?(\\w+)?$/.test(hash)) {\r\n            const calcSettings = fillModes[RegExp.$1 as Difficulty] || fillModes[synonyms[RegExp.$1] as Difficulty] || fillModes.default\r\n            const {innerWidth, innerHeight} = window\r\n            const maxSize = Math.max(innerWidth, innerHeight)\r\n            const minSize = Math.min(innerWidth, innerHeight)\r\n\r\n            const fieldSize = Math.floor(minSize / calcSettings.min)\r\n            const fieldsMaxSide = Math.floor(maxSize / fieldSize)\r\n\r\n            const mines = Math.floor(calcSettings.min * fieldsMaxSide * calcSettings.mines)\r\n\r\n            return innerWidth > innerHeight\r\n                ? {\r\n                    mines,\r\n                    columns: fieldsMaxSide,\r\n                    rows: calcSettings.min\r\n                }\r\n                : {\r\n                    mines,\r\n                    columns: calcSettings.min,\r\n                    rows: fieldsMaxSide\r\n                }\r\n        }\r\n\r\n        if (/^custom:/.test(hash)) {\r\n            const groups = hash.match(/^custom:(?<columns>\\d+)\\D(?<rows>\\d+)\\D(?<mines>\\d+)/)?.groups as {[key in TSettings]: string}\r\n            let customSettings = {} as IBoardSettings\r\n            for (let key in groups) customSettings[key as keyof IBoardSettings] = +groups[key as TSettings]\r\n            return customSettings\r\n        }\r\n\r\n        return modes.default\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './settings-selector.scss'\r\nimport {Difficulty, IPossibleBoardSettings, Settings} from \"../settings\";\r\nimport {BoardState, GameState} from \"../board-state\";\r\n\r\nexport interface IInfo {\r\n    timer: number\r\n    minesLeft: number\r\n    state: GameState\r\n}\r\n\r\ninterface ISettingsSelectorProps {\r\n    settings: Settings\r\n    info: IInfo\r\n    board: BoardState\r\n    onClose: Function\r\n}\r\n\r\ninterface IState {\r\n    board: string | null\r\n    mines: Difficulty | null\r\n}\r\n\r\nexport class SettingsSelector extends React.Component<ISettingsSelectorProps> {\r\n    joiner = 'x'\r\n    possible: Array<IPossibleBoardSettings> = []\r\n    state: IState\r\n\r\n    constructor(props: ISettingsSelectorProps) {\r\n        super(props);\r\n\r\n        this.possible = this.props.settings.getPossibleSettings()\r\n        let board: string | null = [this.props.settings.columns, this.props.settings.rows].join(this.joiner)\r\n        if (!this.getVariantByBoard(board)) board = null\r\n\r\n        const difficulty: {[mines: string]: Difficulty} = {\r\n            [this.getMinesCount('beginner', board)]: 'beginner',\r\n            [this.getMinesCount('intermediate', board)]: 'intermediate',\r\n            [this.getMinesCount('expert', board)]: 'expert',\r\n        }\r\n        const mines = difficulty[this.props.settings.mines]\r\n\r\n        this.state = {board, mines}\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"settings-selector\" onClick={event => event.stopPropagation()}>\r\n            {this.props.info.state !== GameState.Pending &&\r\n                <div>\r\n                    <h3>Game State: {this.props.info?.state !== GameState.InProgress ? this.props.info?.state : ''}</h3>\r\n                    <h4 className=\"sub\">Seconds from start: {this.props.info?.timer ?? '--'}</h4>\r\n                    {this.props.info?.state === GameState.InProgress &&\r\n                        <h4 className=\"sub\">Mines left: {this.props.board.minesCount}</h4>\r\n                    }\r\n                    {this.props.info?.state === GameState.InProgress &&\r\n                        <button className=\"button small\" onClick={this.getHelp}>Get Help</button>\r\n                    }\r\n                </div>\r\n            }\r\n\r\n            <h3>Standard difficulty levels:</h3>\r\n            <p className=\"link\" onClick={() => this.changeSettings('fill')}>Default</p>\r\n            <p className=\"link\" onClick={() => this.changeSettings('fill:beginner')}>Beginner</p>\r\n            <p className=\"link\" onClick={() => this.changeSettings('fill:intermediate')}>Intermediate</p>\r\n            <p className=\"link\" onClick={() => this.changeSettings('fill:expert')}>Expert</p>\r\n\r\n            <h3>Current board:</h3>\r\n            <p>{this.props.settings.columns}x{this.props.settings.rows} with {this.props.settings.mines} mines.</p>\r\n            <button className=\"button sup\" onClick={() => this.restart()}>Restart</button>\r\n\r\n            <h3>Custom board:</h3>\r\n            <label>\r\n                <h4>Board size:</h4>\r\n                <select onChange={this.changeCustom} name=\"board\" defaultValue={this.state.board as string}>\r\n                    {!this.state.board &&\r\n                        <option className=\"default\">-- Select Board --</option>\r\n                    }\r\n                    {this.possible.map(variant => {\r\n                        const name = [variant.columns, variant.rows].join(this.joiner)\r\n                        return <option key={name} value={name}>{name}</option>\r\n                    })}\r\n                </select>\r\n            </label>\r\n\r\n            <label>\r\n                <h4>Mines count:</h4>\r\n                <select onChange={this.changeCustom} name=\"mines\" defaultValue={this.state.mines as string}>\r\n                    {!this.state.mines &&\r\n                        <option className=\"default\">-- Select Mines --</option>\r\n                    }\r\n                    <option value=\"beginner\">\r\n                        Beginner {this.state.board && `(${this.getMinesCount('beginner')})`}\r\n                    </option>\r\n                    <option value=\"intermediate\">\r\n                        Intermediate {this.state.board && `(${this.getMinesCount('intermediate')})`}\r\n                    </option>\r\n                    <option value=\"expert\">\r\n                        Expert {this.state.board && `(${this.getMinesCount('expert')})`}\r\n                    </option>\r\n                </select>\r\n            </label>\r\n\r\n            <button className=\"button\" onClick={() => this.changeSettings('')}\r\n                    disabled={!this.state.board || !this.state.mines}>Apply Custom\r\n            </button>\r\n        </div>\r\n    }\r\n\r\n    changeCustom = (event: any) => {\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n\r\n    changeSettings = (hash: string = 'fill:default') => {\r\n        if (!hash && this.state.board && this.state.mines) {\r\n            const variant = this.getVariantByBoard(this.state.board)\r\n            hash = 'custom:' + [variant?.columns, variant?.rows, variant?.mines[this.state.mines]].join(this.joiner)\r\n        }\r\n\r\n        window.history.pushState({}, 'Minesweeper', '#' + hash)\r\n        window.location.reload()\r\n    }\r\n\r\n    private getMinesCount(mines: Difficulty, board: string | null = this.state.board): string {\r\n        if (!board) return '--'\r\n        const variant = this.getVariantByBoard(board)\r\n        return variant?.mines[mines].toString() ?? '--'\r\n    }\r\n\r\n    getVariantByBoard(board: string): IPossibleBoardSettings | null {\r\n        const [columns, rows] = board.split(this.joiner).map(string => Number(string))\r\n        return this.possible.find(variant => variant.columns === columns && variant.rows === rows) ?? null\r\n    }\r\n\r\n    getHelp = () => {\r\n        this.props.board.help()\r\n        this.props.board.checkWin()\r\n        this.props.onClose()\r\n    }\r\n\r\n    private restart() {\r\n        window.location.reload()\r\n    }\r\n}","type Direction = 'up' | 'down' | 'left' | 'right'\r\ntype Handler = (event: TouchEvent) => void\r\ntype Handlers = {[direction in Direction]?: Handler}\r\n\r\nexport class Swipe {\r\n    private startX: number | null = null\r\n    private startY: number | null = null\r\n    private readonly element: HTMLElement | null = null\r\n    private handlers: Handlers = {}\r\n    private threshold = Math.min(window.innerWidth, window.innerHeight) / 5\r\n\r\n    constructor(element: HTMLElement | string = document.body, addImmediately = false) {\r\n        this.element = typeof element === 'string' ? document.querySelector(element) ?? null : (element as HTMLElement)\r\n        if (addImmediately) this.attach()\r\n    }\r\n\r\n    public attach() {\r\n        if (!this.element) return;\r\n        this.element.addEventListener('touchstart', this.handleTouchStart, false);\r\n        this.element.addEventListener('touchend', this.handleTouchEnd, false);\r\n    }\r\n\r\n    public detach() {\r\n        if (!this.element) return;\r\n        this.element.removeEventListener('touchstart', this.handleTouchStart, false);\r\n        this.element.removeEventListener('touchend', this.handleTouchEnd, false);\r\n    }\r\n\r\n    public on(direction: Direction, handler: Handler): Swipe\r\n    public on(handlers: Handlers): Swipe\r\n\r\n    public on(some: Direction | Handlers, handler?: Handler): Swipe {\r\n        if (some && handler) this.handlers[some as Direction] = handler\r\n        else Object.assign(this.handlers, some as Handlers)\r\n\r\n        return this\r\n    }\r\n\r\n    private handleTouchStart = (event: TouchEvent) => {\r\n        const {clientX: startX, clientY: startY} = event.touches[0]\r\n        Object.assign(this, {startX, startY})\r\n    }\r\n\r\n    private handleTouchEnd = (event: TouchEvent) => {\r\n        if (this.startX == null || this.startY == null) return;\r\n\r\n        const {clientX: endX, clientY: endY} = event.changedTouches[0]\r\n\r\n        let diffX = this.startX - endX\r\n        if (Math.abs(diffX) < this.threshold) diffX = 0\r\n\r\n        let diffY = this.startY - endY\r\n        if (Math.abs(diffY) < this.threshold) diffY = 0\r\n\r\n        const isHorizontal = Math.abs(diffX) > Math.abs(diffY)\r\n\r\n        const direction: Direction = isHorizontal\r\n            ? diffX > 0 ? 'left' : 'right'\r\n            : diffY > 0 ? 'up' : 'down'\r\n\r\n        // console.log('swipe', {diffX, diffY, dx: this.startX - endX, dy: this.startY - endY, th: this.threshold, isHorizontal, direction})\r\n        this.startX = null;\r\n        this.startY = null;\r\n\r\n        return this.handlers[direction]?.(event)\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './wrapper.scss'\r\n\r\ninterface IWrapperProps {\r\n    onClose: Function\r\n}\r\n\r\nexport class Wrapper extends React.Component<IWrapperProps> {\r\n    render() {\r\n        return <div className=\"wrapper\" onClick={this.close} onKeyUp={this.catchEsc}>\r\n            {this.props.children}\r\n        </div>;\r\n    }\r\n\r\n    close = () => {\r\n        this.props.onClose?.()\r\n    }\r\n\r\n    catchEsc = (event: any) => {\r\n        if ((event as KeyboardEvent).key === 'Escape') this.close()\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {Board} from \"./board/board\";\r\nimport {Settings} from \"./settings\";\r\nimport {IInfo, SettingsSelector} from \"./settings-selector/settings-selector\";\r\nimport {Swipe} from \"./swipe\";\r\nimport {Wrapper} from \"./wrapper/wrapper\";\r\nimport {BoardState, GameState} from \"./board-state\";\r\n\r\nclass App extends React.Component {\r\n    board = new BoardState()\r\n    settings = new Settings()\r\n    state = {\r\n        showSettings: false,\r\n        timer: 0,\r\n        minesLeft: this.settings.mines,\r\n        state: GameState.Pending\r\n    }\r\n    swipe = new Swipe().on({\r\n        left: event => this.toggleSettings(event, false),\r\n        right: event => this.toggleSettings(event, true),\r\n    })\r\n    isCheatOn = false\r\n\r\n    componentDidMount() {\r\n        document.body.addEventListener('keyup', this.toggleSettings)\r\n        this.swipe.attach()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.removeEventListener('keyup', this.toggleSettings)\r\n        this.swipe.detach()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Board board={this.board}\r\n                       columns={this.settings.columns}\r\n                       rows={this.settings.rows}\r\n                       mines={this.settings.mines}\r\n                       updateInfo={this.updateInfo}\r\n                />\r\n                {this.state.showSettings &&\r\n                    <Wrapper onClose={this.closeSettings}>\r\n                        <SettingsSelector settings={this.settings} info={this.state} board={this.board} onClose={this.closeSettings}/>\r\n                    </Wrapper>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    closeSettings = () => {\r\n        this.setState({showSettings: false})\r\n    }\r\n\r\n    toggleCheat = () => {\r\n        this.board.minesFields.filter(mine => !mine.isMarked).forEach(mine => mine.component?.cheat())\r\n    }\r\n\r\n    toggleSettings = (event: KeyboardEvent | TouchEvent, value: boolean = !this.state.showSettings) => {\r\n        if (event.type === 'keyup') {\r\n            const {key} = event as KeyboardEvent\r\n            if (key.toLowerCase() === 'h' && this.state.state === GameState.InProgress) {\r\n                if (event.ctrlKey && event.shiftKey) {\r\n                    this.isCheatOn = !this.isCheatOn\r\n                    this.toggleCheat()\r\n                } else {\r\n                    if (this.isCheatOn) this.toggleCheat()\r\n                    this.board.help()\r\n                    if (this.isCheatOn) this.toggleCheat()\r\n                }\r\n                return\r\n            }\r\n            if (key !== 'Escape') return\r\n        }\r\n        this.setState({showSettings: value})\r\n    }\r\n\r\n    updateInfo = (info: IInfo) => {\r\n        this.setState(info)\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}